<?php

// // (Simple Invoking - Calling all modules implementing 'hook_name')
// module_invoke_all('hook_name');

// // (Invoking a Particular one) - Calling a particular module's 'hook_name' implementation
// module_invoke('module_name', 'hook_name')
// // @note: module_name comes without '.module'
// // @note: hook_name is the specific hook define in that module

// //(Collection results in an array)
// $result = array();
// foreach (module_implements('hook_name') as $module){
//     //Calling all modules implement hook_hook_name and 
//     //Returning results than pushing them into the $result array:
//     $result[] = module_invoke($module, 'hook_name');
// }

// //(Altering data using drupal_alter())
// $data = array(
//     'key1' => 'value1',
//     'key2' => 'value2',
// );
// //Calling all modules implementing hook_my_data_alter():
// drupal_alter('my_data', $data);
// // You should implement hook_my_data_alter() in all other modules in which you want to alter $data


// //(Passing by reference: cannot use module_invoke())
// foreach (module_implements('hook_name')as $module){
//     $fucntion = $module . '_hook_name';
//     // will call all modules implementing hook_hook_name
//     // and can pass each argument as reference determined
//     // by the function declaration
//     $function($arg1, $arg2);
// }

/**
 * @file
 * A block module that displays recent blog and
 * forum posts.
 */

/**
 * 
 * Implements hook_help().
 * 
 * Displays help and module information.
 * 
 * @param path
 *  Which path of the sites we're using to display help
 * 
 * @param arg
 *  Array that holds the current path as returned from arg() function
 
 */
function current_posts_help($path, $arg) {
    switch ($path) {
        case "admin/help#current_posts":
            return t("Displays links to nodes created on this date");
            break;
    }
}

// // function custom_form_block_info() {
//     $blocks['current_posts'] = array(
//         // The name that will appear in the block list.
//         'info' => t('Current posts'),
//         // Default setting.
//         'cache' => DRUPAL_CACHE_PER_ROLE,
//     // );
  
// // }

function current_posts_block_info() {
    $blocks['current_posts'] = array(
        // The name that will appear in the block list.
        'info' => t('Current posts'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['example_empty'] = array(
        'info' => t('Example: empty block'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'node/*',
    );
        return $blocks;
}

// function custom_form_contents() {
//     //Get today's date.
//     $today = getdate();
//     //Calculate the date a week ago.
//     $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
//     //Get all posts from one week ago to the present.
//     $end_time = time();
//     $max_num = variable_get('current_posts_max', 3);
//     //Use Database API to retrieve current posts.
//     $query = db_select('node', 'n')
//         ->fields('n', array('nid', 'title', 'created'))
//         ->condition('status', 1) //Published.
//         ->condition('created', array($start_time, $end_time), 'BETWEEN')
//         ->orderBy('created', 'DESC') //Most recent first.
//         ->range(0, $max_num)
//         ->execute();
//     return $query;
// }

function current_posts_contents($display) {
    $today = getdate();
    //Calculate midnnight a week ago.
    $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
    $end_time = time();

    $max_num = variable_get('current_posts_max', 3);

    $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1)
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC'); //Most recent first. Query paused here.

    if ($display == 'block') {
    // Restrict the range if called with 'block' argument.
        $query->range(0, $max_num);
    } //Now proceeds to execute().
    //If called by page, query proceeds directly to execute().

    return $query->execute();
}



//Implements hook_block_view().
// Prepares the contents of the block.
function current_posts_block_view($delta = '') {
    switch($delta) {
        case 'current_posts':
            $block['subject'] = t('Current posts');
            if(user_access('access content')) {
                // Use our custom function to retrieve data.
                // $result = custom_form_contents();
                $result = current_posts_contents('block');
                // Array to contain items for the block to render.
                $items = array();
                // Iterate over the result set and format as links.
                foreach($result as $node) {
                    $items[] = array(
                        'data' => l($node->title, 'node/' . $node->nid),
                    );
                }
                // No content in the last week.
                if(empty($items)) {
                $block['content'] = t('No posts available');
                }
                else {
                // Pass data through theme functions.
                $block['content'] = theme('item_list', array('items' => $items));
                }
            }
        return $block;   
    }
}
/**
 *  Implements hook_menu()
 */ 
// function custom_form_menu() {
//     $items = array();
//     $items['admin/config/content/current_posts'] = array(
//         'title' => 'Current posts',
//         'description' => 'Configuration for Current posts module',
//         'page callback' => 'drupal_get_form',
//         'page arguments' => array('current_posts_form'),
//         'access arguments' => array('access administration pages'),
//         'type' => MENU_NORMAL_ITEM,
//     );
//     return $items;
// }
function current_posts_menu() {
    $items = array();
    $items['admin/config/content/current_posts'] = array(
        'title' => 'Current posts',
        'description' => 'Configuration for Current posts module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('current_posts_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
            );
    $items['current_posts'] = array(
        'title' => 'Current posts',
        'page callback' => '_current_posts_page',
        'access arguments' => array('access current_posts content'),
        'type' => MENU_NORMAL_ITEM, //Will appear in Navigation menu
    );
    return $items;
}

function current_posts_form($form, &$form_state) {
    $form['current_posts_max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of posts'),
        '#default_value' => variable_get('current_posts_max', 3),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('The maximum number of links to display in the block.'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * Implements validation from the Form API
 * 
 * @param $form
 *  A structured array containing the elements and properites of the form.
 * @param $form_state
 *  A array that stores information about the form's current state
 * during processing.
 */

function current_posts_form_validate($form, &$form_state) {
    $max_num = $form_state['values']['current_post_max'];
    if (!is_numeric($max_num)) {
        form_set_error('current_posts_max', t('You must enter a number for the maximum number of posts to display.'));
    }
    elseif ($max_num <= 0) {
        form_set_error('current_posts_max', t('Maximum number of posts to display must be positive'));
    }
}

/**
 * Implements hook_permission().
 */
function current_posts_permission() {
    return array(
        'access current_posts content' => array(
            'title' => t('Access content for the Current Posts module'),
        )
        );
}

/**
 * Custom page callback function, declared in the custom_form_menu().
 */
function _current_posts_page() {
    $result = current_posts_contents('page');
    //Array to contain items for the page to render.
    $items = array();
    //Iterate over the result set and format as links.
    foreach ($result as $node) {
        $items[] = array(
            'date' => l($node->title, 'node/' . $node->nid),
        );
    }
    if (empty($items)) { //No content in the last week.
        $page_array['current_posts_arguments'] = array(
            //Title serves as page subtitle
            '#title' => t('All posts from the last week'),
            '#markup' => t('No posts available.'),
        );
        return $page_array;
    }
    else {
        $page_array['current_posts_arguments'] = array(
            '#title' => t('All posts from the last week'),
            '#items' => $items,
            //Theme hook with suggestion.
            '#theme' => 'item_list__current_posts',
        );
        return $page_array;
    }
}
